---
Parameters:
  latestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  vpcId: 
    Type: String 
    Default: vpc-12e16777
Resources:
  dbPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: rdsDbSecret
      Description: rds database admin password (randomly generated of course!)
      GenerateSecretString:
        SecretStringTemplate: '{"username": "cpollard"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\' 
  rdsDatabase:
    Type: AWS::RDS::DBInstance
    Properties:  
    #  TODO: Set charset = utf-8
      AllocatedStorage: 80
      DBInstanceClass: db.t3.medium
      DBName: smr_live
      Engine: MySQL
      EngineVersion: "5.7.22"      
      MasterUsername: !Sub '{{resolve:secretsmanager:${dbPassword}:SecretString:username}}' 
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${dbPassword}:SecretString:password}}'
      DBSubnetGroupName: default-vpc-12e16777
      Tags: 
        - Key: Name
          Value: smr mysql database 
  webServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Web server security group
      VpcId: !Ref vpcId
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref albSecurityGroup
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
  albSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: alb security group
      VpcId: !Ref vpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
  rdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: rds security group
      VpcId: !Ref vpcId
  WebServerInstance: 
    Type: AWS::EC2::Instance 
    Metadata: 
      AWS::CloudFormation::Init: 
        config: 
          packages: 
            yum:
              php: []
              httpd: []
              php-xml: []
          # groups: 
          #   :
          # users: 
          #   :
          sources: 
            /smr: "https://github.com/cpollard0/smr-serverless/tarball/FEATURE_secretsManagerDbSecret" #  "https://github.com/smrealms/smr/tarball/master"
          # files: 
          #   :
          commands: 
            configureEnv:
              command: !Sub |
                amazon-linux-extras install php7.3  #  amazon-linux-extras not available in packages yet
                mv /smr/.env.sample /smr/.env
                db_password=$(aws secretsmanager get-secret-value --region ${AWS::Region} --secret-id ${dbPassword} --query SecretString | jq --raw-output '.' | jq -r .password)
                db_username=$(aws secretsmanager get-secret-value --region ${AWS::Region} --secret-id ${dbPassword} --query SecretString | jq --raw-output '.' | jq -r .username)

                curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
                /usr/local/bin/composer install

                # configure .env 
                sed -i ''s/{{ mysql_host }}/${rdsDatabase.Endpoint.Address}/g'' /smr/.env
                sed -i "s/{{ mysql_password }}/$db_password/g" /smr/.env
                sed -i "s/{{ mysql_user }}/$db_username/g" /smr/.env

                mv /smr/config/config.specific.sample.php /smr/config/config.specific.php

                # Configure secrets
                mv /smr/config/SmrMySqlSecrets.sample.inc /smr/config/SmrMySqlSecrets.inc
                sed -i ''s/{{ mysql_host }}/${rdsDatabase.Endpoint.Address}/g'' /smr/config/SmrMySqlSecrets.inc
                sed -i "s/{{ mysql_password }}/$db_password/g" /smr/config/SmrMySqlSecrets.inc
                sed -i "s/{{ mysql_user }}/$db_username/g" /smr/config/SmrMySqlSecrets.inc
                rm -rf /var/www/html && ln -s "/smr/htdocs" /var/www/html

                cd /smr
                # wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/5.2.4/flyway-commandline-5.2.4-linux-x64.tar.gz | tar xvz && sudo ln -s /smr/flyway-5.2.4/flyway /usr/local/bin 
                # cd /smr/flyway-5.2.4/
                # ./flyway -url=jdbc:mysql://${rdsDatabase.Endpoint.Address}/smr_live?useSSL=false -user=$db_username -password=$db_password migrate locations=filesystem:/smr/db/patches
                systemctl start httpd
          # services: 
          #   systemctl: ## Not supported 
          #     httpd: 
          #       enabled: true
          #       ensureRunning: true
    Properties: 
      # TODO: Add bespoke, least privilege IAM Instance Profile
      IamInstanceProfile: Administrator
      ImageId: !Ref latestAmiId
      InstanceType: t3.small
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0" 
          SubnetId: subnet-e16cc896 # TODO: VPC
          GroupSet: 
            - !Ref webServerSecurityGroup
  smrTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Name: smr-app-servers
      TargetType: instance
      Targets:
        - Id: !Ref WebServerInstance
      Port: 80
      Protocol: HTTP
      VpcId: !Ref vpcId
  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:  
      # LoadBalancerAttributes: 
      #   - LoadBalancerAttribute
      # Name: String
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref albSecurityGroup 
      Subnets: 
        - subnet-f4ef09df
        - subnet-e16cc896
      # Tags: 
      #   - Tag
      Type: application
  httpListenser:
   Type: AWS::ElasticLoadBalancingV2::Listener
   Properties:
     DefaultActions:
       - Type: "forward"
         TargetGroupArn: !Ref smrTargetGroup
     LoadBalancerArn: !Ref loadBalancer
     Port: 80
     Protocol: "HTTP"

  # publicWebsiteBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     PolicyDocument: 
  #       Version: 2012-10-17
  #       Statement:
  #         - Sid: PublicReadForGetBucketObjects
  #           Effect: Allow
  #           Principal: 
  #             AWS: "*"
  #           Action: 's3:GetObject'
  #           Resource: !Sub ${resumeDotDevBucket.Arn}/*
  #     Bucket: !Ref resumeDotDevBucket
  # resumeDotDevBucketDub:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     WebsiteConfiguration:
  #       RedirectAllRequestsTo:
  #         HostName: !Ref resumeDotDevBucket